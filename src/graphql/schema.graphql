# This file was generated based on ".graphqlconfig". Do not edit manually.

schema {
  query: Query
  mutation: Mutation
}

type Ingredient {
  "The document's ID."
  _id: ID!
  "The document's timestamp."
  _ts: Long!
  amount: Int!
  product: Product
  recipe: Recipe
  unit: Unit!
}

"The pagination object for elements of type 'Ingredient'."
type IngredientPage {
  "A cursor for elements coming after the current page."
  after: String
  "A cursor for elements coming before the current page."
  before: String
  "The elements of type 'Ingredient' in this page."
  data: [Ingredient]!
}

type Mutation {
  "Create a new document in the collection of 'Ingredient'"
  createIngredient(
    "'Ingredient' input values"
    data: IngredientInput!
  ): Ingredient!
  "Create a new document in the collection of 'Product'"
  createProduct(
    "'Product' input values"
    data: ProductInput!
  ): Product!
  "Create a new document in the collection of 'Recipe'"
  createRecipe(
    "'Recipe' input values"
    data: RecipeInput!
  ): Recipe!
  "Delete an existing document in the collection of 'Ingredient'"
  deleteIngredient(
    "The 'Ingredient' document's ID"
    id: ID!
  ): Ingredient
  "Delete an existing document in the collection of 'Product'"
  deleteProduct(
    "The 'Product' document's ID"
    id: ID!
  ): Product
  "Delete an existing document in the collection of 'Recipe'"
  deleteRecipe(
    "The 'Recipe' document's ID"
    id: ID!
  ): Recipe
  "Update an existing document in the collection of 'Ingredient'"
  updateIngredient(
    "'Ingredient' input values"
    data: IngredientInput!,
    "The 'Ingredient' document's ID"
    id: ID!
  ): Ingredient
  "Update an existing document in the collection of 'Product'"
  updateProduct(
    "'Product' input values"
    data: ProductInput!,
    "The 'Product' document's ID"
    id: ID!
  ): Product
  "Update an existing document in the collection of 'Recipe'"
  updateRecipe(
    "'Recipe' input values"
    data: RecipeInput!,
    "The 'Recipe' document's ID"
    id: ID!
  ): Recipe
}

type Product {
  "The document's ID."
  _id: ID!
  "The document's timestamp."
  _ts: Long!
  name: String!
}

"The pagination object for elements of type 'Product'."
type ProductPage {
  "A cursor for elements coming after the current page."
  after: String
  "A cursor for elements coming before the current page."
  before: String
  "The elements of type 'Product' in this page."
  data: [Product]!
}

type Query {
  allProducts(
    "The pagination cursor."
    _cursor: String,
    "The number of items to return per page."
    _size: Int
  ): ProductPage!
  allRecipes(
    "The pagination cursor."
    _cursor: String,
    "The number of items to return per page."
    _size: Int
  ): RecipePage!
  "Find a document from the collection of 'Ingredient' by its id."
  findIngredientByID(
    "The 'Ingredient' document's ID"
    id: ID!
  ): Ingredient
  "Find a document from the collection of 'Product' by its id."
  findProductByID(
    "The 'Product' document's ID"
    id: ID!
  ): Product
  "Find a document from the collection of 'Recipe' by its id."
  findRecipeByID(
    "The 'Recipe' document's ID"
    id: ID!
  ): Recipe
  findRecipeByName(name: String!): Recipe
}

type Recipe {
  "The document's ID."
  _id: ID!
  "The document's timestamp."
  _ts: Long!
  ingredients(
    "The pagination cursor."
    _cursor: String,
    "The number of items to return per page."
    _size: Int
  ): IngredientPage!
  name: String!
  steps: [String!]!
}

"The pagination object for elements of type 'Recipe'."
type RecipePage {
  "A cursor for elements coming after the current page."
  after: String
  "A cursor for elements coming before the current page."
  before: String
  "The elements of type 'Recipe' in this page."
  data: [Recipe]!
}

enum Unit {
  Gram
  Milliliter
  Pack
  Piece
}

"'Ingredient' input values"
input IngredientInput {
  amount: Int!
  product: IngredientProductRelation
  recipe: IngredientRecipeRelation
  unit: Unit!
}

"Allow manipulating the relationship between the types 'Ingredient' and 'Product' using the field 'Ingredient.product'."
input IngredientProductRelation {
  "Connect a document of type 'Product' with the current document using its ID."
  connect: ID
  "Create a document of type 'Product' and associate it with the current document."
  create: ProductInput
  "If true, disconnects this document from 'Product'"
  disconnect: Boolean
}

"Allow manipulating the relationship between the types 'Ingredient' and 'Recipe' using the field 'Ingredient.recipe'."
input IngredientRecipeRelation {
  "Connect a document of type 'Recipe' with the current document using its ID."
  connect: ID
  "Create a document of type 'Recipe' and associate it with the current document."
  create: RecipeInput
  "If true, disconnects this document from 'Recipe'"
  disconnect: Boolean
}

"'Product' input values"
input ProductInput {
  name: String!
}

"Allow manipulating the relationship between the types 'Recipe' and 'Ingredient'."
input RecipeIngredientsRelation {
  "Connect one or more documents of type 'Ingredient' with the current document using their IDs."
  connect: [ID]
  "Create one or more documents of type 'Ingredient' and associate them with the current document."
  create: [IngredientInput]
  "Disconnect the given documents of type 'Ingredient' from the current document using their IDs."
  disconnect: [ID]
}

"'Recipe' input values"
input RecipeInput {
  ingredients: RecipeIngredientsRelation
  name: String!
  steps: [String!]!
}


scalar Date

scalar Time

"The `Long` scalar type represents non-fractional signed whole numeric values. Long can represent values between -(2^63) and 2^63 - 1."
scalar Long
